<#@ template language="C#v3.5" hostspecific="True" debug="true" #>
<#@ output extension=".log" #>
<#@ assembly name="System" #>
<#@ assembly name="System.ServiceModel.dll" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.ServiceModel" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<#@ include file="Manager.ttinclude" #>
<#@ include file="GlobalSettings.ttinclude" #>

<#
// set template configuration
var options = new Dictionary<string, object>()
{
	// path to assembly containing data contracts
	// TODO: Figure out a way to determine this path configuration in-dependant
	{ "dataContractAssembly", SOLUTION_BASE_PATH + @"\WcfT4Client.Data\bin\Debug\WcfT4Client.Data.dll" },
	// set this flag to true if you want to generate a single file containing all datacontract classes
	{ "generateSinglePhpFile", false }
};

Assembly dcAsm = Assembly.Load(System.IO.File.ReadAllBytes(Host.ResolveAssemblyReference(options["dataContractAssembly"].ToString())));
Assembly svcMdlAsm = Assembly.Load("System.Runtime.Serialization, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

List<Type> dataContractTypes = new List<Type>();
foreach (Type t in dcAsm.GetTypes())
{
    Type dataContractAttr = svcMdlAsm.GetType("System.Runtime.Serialization.DataContractAttribute");
    object[] attr = t.GetCustomAttributes(dataContractAttr, false);
	if (attr.Length > 0)
		dataContractTypes.Add(t);
}

Manager manager = Manager.Create(Host, GenerationEnvironment);
Type dataMemberAttr = svcMdlAsm.GetType("System.Runtime.Serialization.DataMemberAttribute");
Type enumMemberAttr = svcMdlAsm.GetType("System.Runtime.Serialization.EnumMemberAttribute");
bool renderSingleFile = (bool)options["generateSinglePhpFile"];
if (renderSingleFile)
{
	manager.StartNewFile("DataContracts.php");
#>
<?php

<#
}
foreach (Type dataType in dataContractTypes)
{
	string className = dataType.Name;
	List<PropertyInfo> dataMembers =
			dataType.GetProperties().Where(
				p => p.GetCustomAttributes(dataMemberAttr, false).Length > 0).ToList();
	if (dataType.IsEnum)
	{
		if (dataType.GetEnumNames().Length == 0)
			continue;
	}
	else
		if (dataMembers.Count == 0)
			continue;
	
	if (!renderSingleFile)
	{
		manager.StartNewFile(className + ".php");
#>
<?php

<#
	}
#>
// START OF CLASS <#= className #>
class <#= className #> {
<#
	// check if we render an enum type
	if (dataType.IsEnum)
	{
		string[] enumNames = dataType.GetEnumNames();
		Array values = dataType.GetEnumValues();
		for (int i = 0; i < enumNames.Length; i++)
		{
#>	public $<#= enumNames[i].ToUpper() #> = <#= (int)values.GetValue(i) #>;
<#
		}
	}
	else
	{		
		foreach (PropertyInfo prop in dataMembers)
		{
			string typeValue = prop.PropertyType.Name;
			if (prop.PropertyType.IsGenericType)
			{
				// get generic type definition
				Type[] genericType = prop.PropertyType.GetGenericArguments();
				typeValue = prop.PropertyType.Name + "<";
				foreach (Type gType in genericType)
				{
					typeValue += gType.Name;
				}
				typeValue += ">";
			}
#>	
  /**
	 * @var <#= typeValue #>
   */
	public $<#= prop.Name #>;
<#
		}
	}
#>}
// END OF CLASS <#= className #>

<#
	if (!renderSingleFile)
	{
		#>
?>
		<#
		manager.EndBlock();
	}
}
if (renderSingleFile)
{
#>
?><#
	manager.EndBlock();
}
manager.Process(true);
#>